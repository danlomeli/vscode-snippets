<<<<<<< HEAD
{
	// Place your snippets for systemverilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		
	"always no reset en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk) begin",
			"	if ($2)",
			"		$1 <= $3;",
			"end"
		],
		"description": "Enabled always block with enable"
	},

	"always no reset wo en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk) begin", 
			"	$1 <= $2;",
			"end"
		],
		"description": "Enabled always block without enable"
	},

	"always async reset w en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk or negedge reset_n) begin",
			"	if (reset_n == 1'b0)",
			"		$1 <= 0;",
			"	else if ($2)", 
			"   		$1 <= $3;",
			"end"
		
		],
		"description": "Asynchronous always block with enabled"
	},
	
	"always async reset wo en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk or negedge reset_n) begin",
			"	if (reset_n == 1'b0)",
			"		$1 <= 0;",
			"	else",
			"		$1 <= $2;",
			"end"
		
		],
		"description": "Asynchronous Reset wo Enabled always block"
	},
	
	"fsm": {
		"prefix": "fsm",
		"body": [
			"typedef enum logic {IDLE = 5'b1_0_10_0,",
			"                    RUN  = 5'b1_1_01_0,",
			"                    END  = 5'b0_1_00_0} states_t;",
			"",
			"logic en0, en1, en2;",
			"states_t   state, state_nxt;",
			"",
			"always_ff @(posedge clk or negedge reset_n)",
			"  if (reset_n == 1'b0) state <= IDLE;",
			"  else          state <= state_nxt;",
			"",
			"always_comb begin",
			"  // state_nxt = IDLE; // Uncomment if default is not used",
			"  casex({state, en0, en1, en2})",
			"    {IDLE, 3'b1xx} : state_nxt = RUN;",
			"    {RUN, 3'b01x}  : state_nxt  = END;",
			"    {RUN, 3'b001}  : state_nxt  = IDLE;",
			"    default        : state_nxt = state;",
			"  endcase",
			"end",
		],
		"description": "Synchronous Moore State Machine"
	},

	"header": {
		"prefix": "header",
		"body": [
			"// Copyright (c) 2019 by Microsoft",
			"//",
			"// File:        ${1:default}.sv",
			"// Author:      v-dalome",
			"//",
			"// Description: ${3:default}",
			"// ",
			"//-----------------------------------------------------------------------------",
			"// Modification history :",
			"// $DateTime:   $",
			"// $Author:     $",
			"// $Change:     $",
			"// $Revision:   $",
			"//-----------------------------------------------------------------------------"
		],
		"description": "Boilerplate header Template"
	},

	"module": {
		"prefix": "module",
		"body": [
			"`begin_keywords \"1364-2001\"   // use Verilog-2001 keywords",
			"",
			"module $1(",
			"    input            clk,",
			"    input            reset_n",
			");",
			"    timeunit 100ps;",
  			"    timeprecision 10fs;",
			"",
			"endmodule",
			"`end_keywords: $1"
		],
		"description": "Boilerplate module Template"
	},
	
	"initial": {
		"prefix": "initial",
		"body": [
			"initial begin",
			"    clk <= 0;",
			"    forever #4 clk = ~clk",
  			"end",
		],
		"description": "Boilerplate simulation initial Template"
	},
	
	"package": {
		"prefix": "package",
		"body": [
			"`ifndef $1_PKG",
			"`define $1_PKG",
			"    package $2",
			"        localparam VERSION = \"1.1\";",
			"",
  			"    endpackage: $2",
			"`endif"
		],
		"description": "Boilerplate package Template"
	},
	
	"typedef": {
		"prefix": "typedef",
		"body": [
			"typedef enum logic [2:0] {WAITE = 3'b001,",
			"                          LOAD  = 3'b010,",
			"                          READY = 3'b100} states_t;"
		],
		"description": "Boilerplate typedef Template"
	},
	
	"struct": {
		"prefix": "struct",
		"body": [
			"// Name of the structure, followed by a period ( . ) and then the name of the member",
			"// Ex. Assignment instruction_word <= `{opcode:NOP, default:0};",
			"",
			"struct {",
			"    int a, b; // 32-bit 2-state variables",
			"    // opcode_t opcode; // Ex. // typedef enum logic [2:0] {NOP, ADD, SUB, MULT, DIV} opcode_t;",
			"    logic [23:0] address; // 24-bit variable",
                        "    bit error; // 1-bit 2-state variable",
			"} instruction word;"
		],
		"description": "Boilerplate struct Template"
	},

	"repeat": {
		"prefix": "repeat",
		"body": [
			"repeat ($1) @(posedge clk);"
		],
		"description": "Boilerplate simulation repeat Template"
	}
		
}
=======
{
	// Place your snippets for systemverilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		
	"always no reset en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk) begin",
			"	if ($2)",
			"		$1 <= $3;",
			"end"
		],
		"description": "Enabled always block with enable"
	},

	"always no reset wo en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk) begin", 
			"	$1 <= $2;",
			"end"
		],
		"description": "Enabled always block without enable"
	},

	"always async reset w en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk or negedge reset_n) begin",
			"	if (!reset_n)",
			"		$1 <= 0;",
			"	else if ($2)", 
			"   		$1 <= $3;",
			"end"
		
		],
		"description": "Asynchronous always block with enabled"
	},
	
	"always async reset wo en": {
		"prefix": "always_ff",
		"body": [
			"logic $1;",
			"",
			"always_ff @(posedge clk or negedge reset_n) begin",
			"	if (!reset_n)",
			"		$1 <= 0;",
			"	else",
			"		$1 <= $2;",
			"end"
		
		],
		"description": "Asynchronous Reset wo Enabled always block"
	},
	
	"fsm": {
		"prefix": "fsm",
		"body": [
			"typedef enum logic {IDLE = 5'b1_0_10_0,",
			"                    RUN  = 5'b1_1_01_0,",
			"                    END  = 5'b0_1_00_0} states_t;",
			"",
			"logic en0, en1, en2;",
			"states_t   state, state_nxt;",
			"",
			"always_ff @(posedge clk or negedge reset_n)",
			"  if (!reset_n) state <= IDLE;",
			"  else          state <= state_nxt;",
			"",
			"always_comb begin",
			"  // state_nxt = IDLE; // Uncomment if default is not used",
			"  case({state, en0, en1, en2})",
			"    {IDLE, 3'b1xx} : state_nxt = RUN;",
			"    {RUN, 3'b01x}  : state_nxt  = END;",
			"    {RUN, 3'b001}  : state_nxt  = IDLE;",
			"    default       state_nxt = state;",
			"  endcase",
			"end",
		],
		"description": "Synchronous Moore State Machine"
	},

	"header": {
		"prefix": "header",
		"body": [
			"//",
			"// File:        ${1:default}.sv",
			"// Author:      Daniel Lomeli",
			"//",
			"// Description: ${3:default}",
			"// ",
			"//-----------------------------------------------------------------------------",
			"// Modification history :",
			"// $DateTime:   $",
			"// $Author:     $",
			"// $Change:     $",
			"// $Revision:   $",
			"//-----------------------------------------------------------------------------"
		],
		"description": "Boilerplate header Template"
	},

	"module": {
		"prefix": "module",
		"body": [
			"`begin_keywords \"1364-2001\"   // use Verilog-2001 keywords",
			"",
			"module $1(",
			"    input            clk,",
			"    input            reset_n",
			");",
			"    timeunit 100ps;",
  			"    timeprecision 10fs;",
			"",
			"endmodule",
			"`end_keywords: $1"
		],
		"description": "Boilerplate module Template"
	},
	
	"initial": {
		"prefix": "initial",
		"body": [
			"initial begin",
			"    clk <= 0;",
			"    forever #4 clk = ~clk",
  			"end",
		],
		"description": "Boilerplate simulation initial Template"
	},
	
	"package": {
		"prefix": "package",
		"body": [
			"`ifndef $1_PKG",
			"`define $1_PKG",
			"    package $2",
			"        localparam VERSION = \"1.1\";",
			"",
  			"    endpackage: $2",
			"`endif"
		],
		"description": "Boilerplate package Template"
	},
	
	"typedef": {
		"prefix": "typedef",
		"body": [
			"typedef enum logic [2:0] {WAITE = 3'b001,",
			"                          LOAD  = 3'b010,",
			"                          READY = 3'b100} states_t;"
		],
		"description": "Boilerplate typedef Template"
	},
	
	"struct": {
		"prefix": "struct",
		"body": [
			"// Name of the structure, followed by a period ( . ) and then the name of the member",
			"// Ex. Assignment instruction_word <= `{opcode:NOP, default:0};",
			"",
			"struct {",
			"    int a, b; // 32-bit 2-state variables",
			"    // opcode_t opcode; // Ex. // typedef enum logic [2:0] {NOP, ADD, SUB, MULT, DIV} opcode_t;",
			"    logic [23:0] address; // 24-bit variable",
                        "    bit error; // 1-bit 2-state variable",
			"} instruction word;"
		],
		"description": "Boilerplate struct Template"
	},

	"repeat": {
		"prefix": "repeat",
		"body": [
			"repeat ($1) @(posedge clk);"
		],
		"description": "Boilerplate simulation repeat Template"
	}
		
}
>>>>>>> refs/remotes/origin/master
